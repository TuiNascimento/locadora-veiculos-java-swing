/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tuinascimento.locadoraveiculos.view.cliente;

import com.tuinascimento.locadoraveiculos.model.cliente.Cliente;
import com.tuinascimento.locadoraveiculos.model.cliente.ClienteTableModel;
import com.tuinascimento.locadoraveiculos.utils.CpfCnpjUtils;
import com.tuinascimento.locadoraveiculos.utils.StringUtils;

import javax.swing.*;
import java.awt.event.ActionEvent;

/**
 * @author asaas
 */
public class ClientesTableView extends javax.swing.JFrame {

    private ClienteTableModel clienteTableModel;

    private static final String UPDATE_BUTTON_TEXT = "Atualizar";

    /**
     * Creates new form ClientesTableView
     */
    public ClientesTableView() {
        initComponents();
        this.clienteTableModel = new ClienteTableModel();
        this.jTableClientes.setModel(this.clienteTableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelNome = new javax.swing.JLabel();
        jLabelRg = new javax.swing.JLabel();
        jLabelCpf = new javax.swing.JLabel();
        jLabelEndereco = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jTextFieldEndereco = new javax.swing.JTextField();
        jFormattedTextFieldCpf = new javax.swing.JFormattedTextField();
        jTextFieldRg = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        botaoRemover = new javax.swing.JButton();
        botaoAtualizar = new javax.swing.JButton();
        botaoAdicionar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuClientes = new javax.swing.JMenu();
        jMenuItemManter = new javax.swing.JMenuItem();
        jMenuVeiculos = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelNome.setText("RG");

        jLabelRg.setText("Nome");

        jLabelCpf.setText("CPF");

        jLabelEndereco.setText("EndereÃ§o");

        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableClientes);
        jTableClientes.getSelectionModel().addListSelectionListener(e -> atualizaValorCamposComClienteSelecionado());

        botaoRemover.setText("Remover");
        botaoRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerListaClientesSelecionados(evt);
            }
        });

        botaoAtualizar.setText("Atualizar");
        botaoAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarListaClientesSelecionados(evt);
            }
        });

        botaoAdicionar.setText("Adicionar");
        botaoAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarCliente(evt);
            }
        });

        jMenuClientes.setText("Clientes");

        jMenuItemManter.setText("jMenuItem2");
        jMenuItemManter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemManterActionPerformed(evt);
            }
        });
        jMenuClientes.add(jMenuItemManter);

        jMenuBar1.add(jMenuClientes);

        jMenuVeiculos.setText("Veiculos");
        jMenuBar1.add(jMenuVeiculos);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelRg)
                            .addGap(44, 44, 44)
                            .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(botaoAdicionar)
                            .addGap(18, 18, 18)
                            .addComponent(botaoRemover)
                            .addGap(18, 18, 18)
                            .addComponent(botaoAtualizar))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelCpf)
                                .addComponent(jLabelNome))
                            .addGap(62, 62, 62)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldRg, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jFormattedTextFieldCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabelEndereco)
                            .addGap(18, 18, 18)
                            .addComponent(jTextFieldEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRg)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNome)
                    .addComponent(jTextFieldRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCpf)
                    .addComponent(jFormattedTextFieldCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEndereco)
                    .addComponent(jTextFieldEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoRemover)
                    .addComponent(botaoAtualizar)
                    .addComponent(botaoAdicionar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemManterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemManterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemManterActionPerformed

    private void atualizarListaClientesSelecionados(java.awt.event.ActionEvent evt) {
        String mensagemValidacao = validarAtualizacaoClientes(evt);
        if (!mensagemValidacao.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensagemValidacao);
            return;
        }

        int linhaAtual = this.jTableClientes.getSelectedRow();
        while (linhaAtual != -1) {
            Cliente clienteAtualizado = new Cliente(this.jTextFieldNome.getText(), this.jTextFieldRg.getText(), this.jFormattedTextFieldCpf.getText(), this.jTextFieldEndereco.getText());
            this.clienteTableModel.atualizaCliente(linhaAtual, clienteAtualizado);

            linhaAtual = this.jTableClientes.getSelectedRow();
        }
    }

    private void atualizaValorCamposComClienteSelecionado() {
        int linhaSelecionada = jTableClientes.getSelectedRow();
        if (linhaSelecionada != -1) {
            Cliente clienteSelecionado = clienteTableModel.getCliente(linhaSelecionada);
            jTextFieldNome.setText(clienteSelecionado.getNome());
            jTextFieldRg.setText(clienteSelecionado.getRg());
            jFormattedTextFieldCpf.setText(clienteSelecionado.getCpf());
            jTextFieldEndereco.setText(clienteSelecionado.getEndereco());
        }
    }

    private void removerListaClientesSelecionados(ActionEvent evt) {
        int linhaAtual = this.jTableClientes.getSelectedRow();
        if (linhaAtual == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente para remover");
            return;
        }

        Object[] options = {"Sim", "NÃ£o"};
        int opcaoSelecionada = JOptionPane.showOptionDialog(this,
                "Deseja remover o(s) cliente(s) selecionado(s)?",
                "Remover Cliente",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                null,
                options,
                options[0]);

        if (opcaoSelecionada != JOptionPane.YES_OPTION) return;

        while (linhaAtual != -1) {
            this.clienteTableModel.removeCliente(linhaAtual);

            linhaAtual = this.jTableClientes.getSelectedRow();
        }
    }

    private void adicionarCliente(java.awt.event.ActionEvent evt) {
        String mensagemValidacao = validarAdicionarCliente(evt);
        if (!mensagemValidacao.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensagemValidacao);
            return;
        }

        Cliente cliente = new Cliente(this.jTextFieldNome.getText(), this.jTextFieldRg.getText(), this.jFormattedTextFieldCpf.getText(), this.jTextFieldEndereco.getText());
        this.clienteTableModel.adicionaCliente(cliente);
    }

    private String validarAdicionarCliente(ActionEvent evt) {
        String mensagemValidacao = "";

        mensagemValidacao += validaCamposObrigatorios();

        mensagemValidacao += validaClienteComMesmosDados(evt);

        return mensagemValidacao;
    }

    private String validarAtualizacaoClientes(ActionEvent evt) {
        String mensagemValidacao = "";

        if (this.jTableClientes.getSelectedRow() == -1) {
            return "Selecione uma linha para atualizar";
        }

        mensagemValidacao += validaCamposObrigatorios();

        mensagemValidacao += validaClienteComMesmosDados(evt);

        int numeroLinhasSelecionadas = this.jTableClientes.getSelectedRowCount();
        if (numeroLinhasSelecionadas > 1) {
            if (!this.jTextFieldRg.getText().isEmpty())
                mensagemValidacao += "NÃ£o Ã© possÃ­vel atualizar mais de um cliente para o mesmo RG.\n";
            if (!StringUtils.removeNonNumeric(this.jFormattedTextFieldCpf.getText()).isEmpty())
                mensagemValidacao += "NÃ£o Ã© possÃ­vel atualizar mais de um cliente para o mesmo CPF.\n";
        }

        return mensagemValidacao;
    }

    private String validaCamposObrigatorios() {
        String mensagemValidacao = "";

        if (this.jTextFieldNome.getText().isEmpty()) {
            mensagemValidacao += "O campo nome Ã© obrigatÃ³rio. \n";
        }

        if (StringUtils.removeNonNumeric(this.jFormattedTextFieldCpf.getText()).isEmpty()) {
            mensagemValidacao += "O campo CPF Ã© obrigatÃ³rio. \n";
        }

        if (!CpfCnpjUtils.validaCpf(this.jFormattedTextFieldCpf.getText())) {
            mensagemValidacao += "O CPF informado Ã© invÃ¡lido. \n";
        }

        return mensagemValidacao;
    }

    private String validaClienteComMesmosDados(ActionEvent evt) {
        Cliente clienteComMesmosDados = this.clienteTableModel.getClienteByUniqueFields(this.jFormattedTextFieldCpf.getText(), this.jTextFieldRg.getText(), this.jFormattedTextFieldCpf.getText());
        if (clienteComMesmosDados == null) return "";

        if (evt.getActionCommand().equals(ClientesTableView.UPDATE_BUTTON_TEXT)) {
            int linhaAtual = this.jTableClientes.getSelectedRow();
            Cliente clienteAtual = this.clienteTableModel.getCliente(linhaAtual);

            if (clienteAtual.equals(clienteComMesmosDados)) return "";
        }

        return "JÃ¡ existe um cliente com os mesmos dados. \n";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientesTableView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdicionar;
    private javax.swing.JButton botaoAtualizar;
    private javax.swing.JButton botaoRemover;
    private javax.swing.JFormattedTextField jFormattedTextFieldCpf;
    private javax.swing.JLabel jLabelCpf;
    private javax.swing.JLabel jLabelEndereco;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelRg;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuClientes;
    private javax.swing.JMenuItem jMenuItemManter;
    private javax.swing.JMenu jMenuVeiculos;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableClientes;
    private javax.swing.JTextField jTextFieldEndereco;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldRg;
    // End of variables declaration//GEN-END:variables
}
