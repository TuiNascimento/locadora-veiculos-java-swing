/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tuinascimento.locadoraveiculos.view.cliente;

import com.tuinascimento.locadoraveiculos.model.cliente.Cliente;
import com.tuinascimento.locadoraveiculos.model.cliente.ClienteTableModel;
import com.tuinascimento.locadoraveiculos.utils.CpfCnpjUtils;
import com.tuinascimento.locadoraveiculos.utils.MaskUtils;
import com.tuinascimento.locadoraveiculos.utils.StringUtils;

import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;
import java.awt.event.ActionEvent;

/**
 * @author asaas
 */
public class ClientesTableView extends javax.swing.JFrame {

    private ClienteTableModel clienteTableModel;

    private static final String UPDATE_BUTTON_TEXT = "Atualizar";

    /**
     * Creates new form ClientesTableView
     */
    public ClientesTableView() {
        initComponents();
        this.clienteTableModel = new ClienteTableModel();
        this.jTableClientes.setModel(this.clienteTableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        campoEndereco = new javax.swing.JTextField();
        campoCpf = new javax.swing.JFormattedTextField();
        campoRg = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        botaoRemover = new javax.swing.JButton();
        botaoAtualizar = new javax.swing.JButton();
        botaoAdicionar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("RG");

        jLabel2.setText("Nome");

        jLabel3.setText("CPF");

        jLabel4.setText("Endereço");

        campoCpf.setFormatterFactory(new DefaultFormatterFactory(MaskUtils.getCpfMask()));

        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableClientes);
        jTableClientes.getSelectionModel().addListSelectionListener(e -> atualizaValorCamposComClienteSelecionado());

        botaoRemover.setText("Remover");
        botaoRemover.addActionListener(evt -> removerListaClientesSelecionados(evt));

        botaoAtualizar.setText(ClientesTableView.UPDATE_BUTTON_TEXT);
        botaoAtualizar.addActionListener(evt -> atualizarListaClientesSelecionados(evt));

        botaoAdicionar.setText("Adicionar");
        botaoAdicionar.addActionListener(evt -> adicionarCliente(evt));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(44, 44, 44)
                                .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(botaoAdicionar)
                                .addGap(18, 18, 18)
                                .addComponent(botaoRemover)
                                .addGap(18, 18, 18)
                                .addComponent(botaoAtualizar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoRg, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(campoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 153, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoRemover)
                    .addComponent(botaoAtualizar)
                    .addComponent(botaoAdicionar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizaValorCamposComClienteSelecionado() {
        int linhaSelecionada = jTableClientes.getSelectedRow();
        if (linhaSelecionada != -1) {
            Cliente clienteSelecionado = clienteTableModel.getCliente(linhaSelecionada);
            campoNome.setText(clienteSelecionado.getNome());
            campoRg.setText(clienteSelecionado.getRg());
            campoCpf.setText(clienteSelecionado.getCpf());
            campoEndereco.setText(clienteSelecionado.getEndereco());
        }
    }

    private void removerListaClientesSelecionados(ActionEvent evt) {
        int linhaAtual = this.jTableClientes.getSelectedRow();
        if (linhaAtual == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente para remover");
            return;
        }

        Object[] options = {"Sim", "Não"};
        int opcaoSelecionada = JOptionPane.showOptionDialog(this,
                "Deseja remover o(s) cliente(s) selecionado(s)?",
                "Remover Cliente",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                null,
                options,
                options[0]);

        if (opcaoSelecionada != JOptionPane.YES_OPTION) return;

        while (linhaAtual != -1) {
            this.clienteTableModel.removeCliente(linhaAtual);

            linhaAtual = this.jTableClientes.getSelectedRow();
        }
    }

    private void atualizarListaClientesSelecionados(java.awt.event.ActionEvent evt) {
        String mensagemValidacao = validarAtualizacaoClientes(evt);
        if (!mensagemValidacao.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensagemValidacao);
            return;
        }

        int linhaAtual = this.jTableClientes.getSelectedRow();
        while (linhaAtual != -1) {
            Cliente clienteAtualizado = new Cliente(this.campoNome.getText(), this.campoRg.getText(), this.campoCpf.getText(), this.campoEndereco.getText());
            this.clienteTableModel.atualizaCliente(linhaAtual, clienteAtualizado);

            linhaAtual = this.jTableClientes.getSelectedRow();
        }
    }

    private void adicionarCliente(java.awt.event.ActionEvent evt) {
        String mensagemValidacao = validarAdicionarCliente(evt);
        if (!mensagemValidacao.isEmpty()) {
            JOptionPane.showMessageDialog(this, mensagemValidacao);
            return;
        }

        Cliente cliente = new Cliente(this.campoNome.getText(), this.campoRg.getText(), this.campoCpf.getText(), this.campoEndereco.getText());
        this.clienteTableModel.adicionaCliente(cliente);
    }

    private String validarAdicionarCliente(ActionEvent evt) {
        String mensagemValidacao = "";

        mensagemValidacao += validaCamposObrigatorios();

        mensagemValidacao += validaClienteComMesmosDados(evt);

        return mensagemValidacao;
    }

    private String validarAtualizacaoClientes(ActionEvent evt) {
        String mensagemValidacao = "";

        if (this.jTableClientes.getSelectedRow() == -1) {
            return "Selecione uma linha para atualizar";
        }

        mensagemValidacao += validaCamposObrigatorios();

        mensagemValidacao += validaClienteComMesmosDados(evt);

        int numeroLinhasSelecionadas = this.jTableClientes.getSelectedRowCount();
        if (numeroLinhasSelecionadas > 1) {
            if (!this.campoRg.getText().isEmpty())
                mensagemValidacao += "Não é possível atualizar mais de um cliente para o mesmo RG.\n";
            if (!StringUtils.removeNonNumeric(this.campoCpf.getText()).isEmpty())
                mensagemValidacao += "Não é possível atualizar mais de um cliente para o mesmo CPF.\n";
        }

        return mensagemValidacao;
    }

    private String validaCamposObrigatorios() {
        String mensagemValidacao = "";

        if (this.campoNome.getText().isEmpty()) {
            mensagemValidacao += "O campo nome é obrigatório. \n";
        }

        if (StringUtils.removeNonNumeric(this.campoCpf.getText()).isEmpty()) {
            mensagemValidacao += "O campo CPF é obrigatório. \n";
        }

        if (!CpfCnpjUtils.validaCpf(this.campoCpf.getText())) {
            mensagemValidacao += "O CPF informado é inválido. \n";
        }

        return mensagemValidacao;
    }

    private String validaClienteComMesmosDados(ActionEvent evt) {
        Cliente clienteComMesmosDados = this.clienteTableModel.getClienteByUniqueFields(this.campoCpf.getText(), this.campoRg.getText(), this.campoCpf.getText());
        if (clienteComMesmosDados == null) return "";

        if (evt.getActionCommand().equals(ClientesTableView.UPDATE_BUTTON_TEXT)) {
            int linhaAtual = this.jTableClientes.getSelectedRow();
            Cliente clienteAtual = this.clienteTableModel.getCliente(linhaAtual);

            if (clienteAtual.equals(clienteComMesmosDados)) return "";
        }

        return "Já existe um cliente com os mesmos dados. \n";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientesTableView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientesTableView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdicionar;
    private javax.swing.JButton botaoAtualizar;
    private javax.swing.JButton botaoRemover;
    private javax.swing.JFormattedTextField campoCpf;
    private javax.swing.JTextField campoEndereco;
    private javax.swing.JTextField campoNome;
    private javax.swing.JTextField campoRg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableClientes;
    // End of variables declaration//GEN-END:variables
}
